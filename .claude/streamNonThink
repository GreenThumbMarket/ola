
# Dev Ticket: Stream Only Post "{some amount of text}" Part in Rust

## Goal:
Implement a function that streams and captures only the portion of a response following the pattern `"{some amount of text}"` from an API endpoint, using Rust.

## Approach:
- Use string parsing to identify and extract the desired portion.
- Implement streaming functionality to handle large responses efficiently.
- Ensure minimal processing by focusing solely on extracting the specified section.

## Implementation Steps:

### 1. Define Struct for Streaming State
```rust
struct StreamReader {
    buffer: String,
    found_brace: bool,
    inside_target_part: bool,
}
```

### 2. Implement Stream Reader Functionality
```rust
fn stream_reader(response_stream: impl IntoIterator<Item = Vec<u8>>) -> impl Iterator<Item = Result<String>> {
    let mut reader = StreamReader {
        buffer: String::new(),
        found_brace: false,
        inside_target_part: false,
    };

    response_stream.into_iter().map(move |chunk| {
        if let Ok(s) = String::from_utf8(chunk) {
            for c in s.chars() {
                match (reader.found_brace, c) {
                    (_, '{') => {
                        reader.found_brace = true;
                    }
                    (true, '}') => {
                        reader.inside_target_part = false;
                    }
                    (inside, _) if inside && !reader.inside_target_part && c == 't' => {
                        reader.inside_target_part = true;
                        // Start capturing from "text}" onwards
                    }
                    (_, _other) => {}
                }

                if reader.inside_target_part {
                    reader.buffer.push(c);
                }
            }
        }
    })
}
```

### 3. Use the Streaming Functionality
```rust
let mut streamer = stream_reader(response_stream);

for part in streamer {
    match part {
        Ok(text) => {
            // Process each chunk of text as it arrives
            println!("Received: {}", text);
        }
        Err(e) => {
            eprintln!("Error: {}", e);
        }
    }
}
```

## Notes:
- The function uses simple string processing to identify and extract the desired section.
- Focuses on streaming for efficiency with large data.
- Minimal error handling included, mainly for demonstration purposes.
